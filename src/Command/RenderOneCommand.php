<?php

namespace App\Command;

use Symfony\Component\Console\Command\Command;
use Symfony\Component\Console\Input\InputArgument;
use Symfony\Component\Console\Input\InputInterface;
use Symfony\Component\Console\Input\InputOption;
use Symfony\Component\Console\Output\OutputInterface;
use Twig\Environment;
use Twig\Loader\FilesystemLoader;

class RenderOneCommand extends Command
{
    protected static $defaultName = 'render-one';


    protected function configure()
    {
        $this->addOption('image', 'i', InputOption::VALUE_OPTIONAL, 'link to image', 'someblackmagic/docker-php-extension-images');
        $this->addArgument('version', InputArgument::REQUIRED);
        $this->addArgument('os', InputArgument::REQUIRED);
        $this->addArgument('ext', InputArgument::REQUIRED);
        parent::configure(); // TODO: Change the autogenerated stub
    }


    protected function execute(
        InputInterface $input,
        OutputInterface $output
    ){
        $phpVersion = $input->getArgument('version');
        $os = $input->getArgument('os');
        $ext = $input->getArgument('ext');

        $modulePath = BASE_PATH . '/data/' . $phpVersion . '/' . $os . '/modules/';


        $loader = new FilesystemLoader(BASE_PATH . 'data/' . $phpVersion . '/' . $os);
        $twig = new Environment($loader, ['debug' => true]);
        $template = $twig->load('core.Dockerfile');

        if(!is_dir(BASE_PATH . 'dst/' . $phpVersion . '/' . $os)){
            if (!mkdir($concurrentDirectory = BASE_PATH . 'dst/' . $phpVersion . '/' . $os, 0777,
                    true) && !is_dir($concurrentDirectory)) {
                throw new \RuntimeException(sprintf('Directory "%s" was not created', $concurrentDirectory));
            }
        }
        $extPath = $modulePath.$ext.'.Dockerfile';
        if(!file_exists($modulePath)) {
            $output->writeln('Module not found');
            return 1;
        }

        $content = file_get_contents($extPath);
        $output = $template->render(['module' => $content]);
        file_put_contents(BASE_PATH . 'dst/' . $phpVersion . '/' . $os . '/' . $ext.'.Dockerfile', $output);

        $arr = [
            'docker buildx build ',
            '--platform linux/amd64,linux/arm64/v8',
//            '--platform linux/amd64',
//            '--builder builder',
            '--progress plain',
            '--push',
            '--load',
            '--tag '.$input->getOption('image').':'.$phpVersion.'-'.$ext.'-'.$os,
            '--file ' . BASE_PATH . 'dst/' . $phpVersion . '/' . $os . '/' . $ext.'.Dockerfile',
            BASE_PATH . 'dst/' . $phpVersion . '/' . $os . '/' ,
        ];

        exec(implode(' ', $arr));


        return 0;
    }
}
