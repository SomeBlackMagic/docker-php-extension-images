<?php

namespace App\Command;

use Symfony\Component\Console\Command\Command;
use Symfony\Component\Console\Input\InputArgument;
use Symfony\Component\Console\Input\InputInterface;
use Symfony\Component\Console\Input\InputOption;
use Symfony\Component\Console\Output\OutputInterface;
use Twig\Environment;
use Twig\Loader\FilesystemLoader;

class RenderCommand extends Command
{
    protected static $defaultName = 'render';

    private $phpVersion = 8.3;
    private $os = 'alpine';


    protected function configure()
    {
        $this->addOption('image', 'i', InputOption::VALUE_OPTIONAL, 'link to image', 'someblackmagic/docker-php-extension-images');
        $this->addArgument('version', InputArgument::REQUIRED);
        $this->addArgument('os', InputArgument::REQUIRED);
        parent::configure(); // TODO: Change the autogenerated stub
    }


    protected function execute(
        InputInterface $input,
        OutputInterface $output
    ){
        $this->phpVersion = $input->getArgument('version');
        $this->os = $input->getArgument('os');

        $dstBuilderFile = 'dst/builder-'.$this->phpVersion.'-'.$this->os.'.sh';

        $files1 = scandir(BASE_PATH . 'data/' . $this->phpVersion . '/' . $this->os .'/modules/');

        $loader = new FilesystemLoader(BASE_PATH . 'data/' . $this->phpVersion . '/' . $this->os);
        $twig = new Environment($loader, ['debug' => true]);
        $template = $twig->load('core.Dockerfile');

        if(!is_dir(BASE_PATH . 'dst/' . $this->phpVersion . '/' . $this->os)){
            if (!mkdir($concurrentDirectory = BASE_PATH . 'dst/' . $this->phpVersion . '/' . $this->os, 0777,
                    true) && !is_dir($concurrentDirectory)) {
                throw new \RuntimeException(sprintf('Directory "%s" was not created', $concurrentDirectory));
            }
        }

        file_put_contents(BASE_PATH . $dstBuilderFile, '',  LOCK_EX);
        file_put_contents(BASE_PATH . $dstBuilderFile, 'set -exu'."\n", FILE_APPEND | LOCK_EX);


        foreach ($files1 as $file) {
            if($file == '.' || $file == '..') continue;

            $content = file_get_contents(BASE_PATH . '/data/' . $this->phpVersion . '/' . $this->os . '/modules/' . $file);
            $output = $template->render(['module' => $content]);
            file_put_contents(BASE_PATH . 'dst/' . $this->phpVersion . '/' . $this->os . '/' . $file, $output);
            $extName = basename($file, ".Dockerfile");
            $arr = [
                'docker buildx build',
                '--platform linux/amd64,linux/arm64/v8',
//                '--builder builder',
                '--push',
                '--pull',
                '--tag '.$input->getOption('image').':'.$this->phpVersion.'-'.$extName.'-'.$this->os,
                '--file ' . BASE_PATH . 'dst/' . $this->phpVersion . '/' . $this->os . '/' . $file,
                BASE_PATH . 'dst/' . $this->phpVersion . '/' . $this->os . '/' ,
            ];

            file_put_contents(BASE_PATH . $dstBuilderFile, implode(' ', $arr)."\n", FILE_APPEND | LOCK_EX);
            file_put_contents(BASE_PATH . $dstBuilderFile, "\n", FILE_APPEND | LOCK_EX);


        }
        return 0;
    }
}
